Authorized
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="robots" content="NONE,NOARCHIVE" />
  <title>NoMethodError at &#x2F;</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    table {
        border:1px solid #ccc; border-collapse: collapse; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
        padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
        font-weight:normal; font-size:11px; border:1px solid #ddd; }
    tbody th { text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%;}
    table td.code div { overflow:hidden; }
    table.source th { color:#666; }
    table.source td {
        font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; }
    ul.traceback li.frame { margin-bottom:1em; }
    div.context { margin: 10px 0; }
    div.context ol {
        padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li {
        font-family:monospace; white-space:pre; color:#666; cursor:pointer; }
    div.context ol.context-line li { color:black; background-color:#ccc; }
    div.context ol.context-line li span { float: right; }
    div.commands { margin-left: 40px; }
    div.commands a { color:black; text-decoration:none; }
    #summary { background: #ffc; }
    #summary h2 { font-family: monospace; font-weight: normal; color: #666; white-space: pre-wrap; }
    #summary ul#quicklinks { list-style-type: none; margin-bottom: 2em; }
    #summary ul#quicklinks li { float: left; padding: 0 1em; }
    #summary ul#quicklinks>li+li { border-left: 1px #666 solid; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 0 20px; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
  </style>
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon;
        // Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\\-");
        var oRegExp = new RegExp("(^|\\s)" + strClassName + "(\\s|$$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block' : 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.innerHTML = s.innerHTML == uarr ? darr : uarr;
      return false;
    }
    //-->
  </script>
</head>
<body>

<div id="summary">
  <h1>NoMethodError at &#x2F;</h1>

  <h2>undefined method `info&#x27; for nil (NoMethodError)

          logger.info { started_request_message(request) }
                ^^^^^</h2>

  <table><tr>
    <th>Ruby</th>
    <td>

      <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;rack&#x2F;logger.rb</code>: in <code>call_app</code>, line 36

    </td>
  </tr><tr>
    <th>Web</th>
    <td><code>GET localhost&#x2F;</code></td>
  </tr></table>

  <h3>Jump to:</h3>
  <ul id="quicklinks">
    <li><a href="#get-info">GET</a></li>
    <li><a href="#post-info">POST</a></li>
    <li><a href="#cookie-info">Cookies</a></li>
    <li><a href="#env-info">ENV</a></li>
  </ul>
</div>

<div id="traceback">
  <h2>Traceback <span>(innermost first)</span></h2>
  <ul class="traceback">

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;rack&#x2F;logger.rb</code>: in <code>call_app</code>

          
          <div class="context" id="c8260">
              
              <ol start="29" class="pre-context" id="pre8260">
                
                <li onclick="toggle('pre8260', 'post8260')">
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">      private
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">        def call_app(request, env) # :doc:
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">          instrumenter = ActiveSupport::Notifications.instrumenter
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">          handle = instrumenter.build_handle(&quot;request.action_dispatch&quot;, { request: request })
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">          handle.start
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">
</li>
                
              </ol>
              

            <ol start="36" class="context-line">
              <li onclick="toggle('pre8260', 'post8260')">          logger.info { started_request_message(request) }<span>...</span></li></ol>

              
              <ol start='37' class="post-context" id="post8260">
                
                <li onclick="toggle('pre8260', 'post8260')">          status, headers, body = response = @app.call(env)
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">          body = ::Rack::BodyProxy.new(body, &amp;handle.method(:finish))
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">          if response.frozen?
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">            [status, headers, body]
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">          else
</li>
                
                <li onclick="toggle('pre8260', 'post8260')">            response[2] = body
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;rack&#x2F;logger.rb</code>: in <code>call</code>

          
          <div class="context" id="c8280">
              
              <ol start="19" class="pre-context" id="pre8280">
                
                <li onclick="toggle('pre8280', 'post8280')">
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">      def call(env)
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">        request = ActionDispatch::Request.new(env)
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">        if logger.respond_to?(:tagged)
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">          logger.tagged(*compute_tags(request)) { call_app(request, env) }
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">        else
</li>
                
              </ol>
              

            <ol start="26" class="context-line">
              <li onclick="toggle('pre8280', 'post8280')">          call_app(request, env)<span>...</span></li></ol>

              
              <ol start='27' class="post-context" id="post8280">
                
                <li onclick="toggle('pre8280', 'post8280')">        end
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">      end
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">      private
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">        def call_app(request, env) # :doc:
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">          instrumenter = ActiveSupport::Notifications.instrumenter
</li>
                
                <li onclick="toggle('pre8280', 'post8280')">          handle = instrumenter.build_handle(&quot;request.action_dispatch&quot;, { request: request })
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;remote_ip.rb</code>: in <code>call</code>

          
          <div class="context" id="c8300">
              
              <ol start="85" class="pre-context" id="pre8300">
                
                <li onclick="toggle('pre8300', 'post8300')">    # Since the IP address may not be needed, we store the object here
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    # without calculating the IP to keep from slowing down the majority of
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    # requests. For those requests that do need to know the IP, the
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    # GetIp#calculate_ip method will calculate the memoized client IP address.
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    def call(env)
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">      req = ActionDispatch::Request.new env
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">      req.remote_ip = GetIp.new(req, check_ip, proxies)
</li>
                
              </ol>
              

            <ol start="92" class="context-line">
              <li onclick="toggle('pre8300', 'post8300')">      @app.call(req.env)<span>...</span></li></ol>

              
              <ol start='93' class="post-context" id="post8300">
                
                <li onclick="toggle('pre8300', 'post8300')">    end
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    # The GetIp class exists as a way to defer processing of the request data
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    # into an actual IP address. If the ActionDispatch::Request#remote_ip method
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    # is called, this class will calculate the value and then memoize it.
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">    class GetIp
</li>
                
                <li onclick="toggle('pre8300', 'post8300')">      def initialize(req, check_ip, proxies)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;request_id.rb</code>: in <code>call</code>

          
          <div class="context" id="c8320">
              
              <ol start="21" class="pre-context" id="pre8320">
                
                <li onclick="toggle('pre8320', 'post8320')">      @app = app
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">      @header = header
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">    end
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">    def call(env)
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">      req = ActionDispatch::Request.new env
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">      req.request_id = make_request_id(req.headers[@header])
</li>
                
              </ol>
              

            <ol start="28" class="context-line">
              <li onclick="toggle('pre8320', 'post8320')">      @app.call(env).tap { |_status, headers, _body| headers[@header] = req.request_id }<span>...</span></li></ol>

              
              <ol start='29' class="post-context" id="post8320">
                
                <li onclick="toggle('pre8320', 'post8320')">    end
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">    private
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">      def make_request_id(request_id)
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">        if request_id.presence
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">          request_id.gsub(&#x2F;[^\w\-@]&#x2F;, &quot;&quot;).first(255)
</li>
                
                <li onclick="toggle('pre8320', 'post8320')">        else
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;method_override.rb</code>: in <code>call</code>

          
          <div class="context" id="c8340">
              
              <ol start="21" class="pre-context" id="pre8340">
                
                <li onclick="toggle('pre8340', 'post8340')">        method = method_override(env)
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">        if HTTP_METHODS.include?(method)
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">          env[RACK_METHODOVERRIDE_ORIGINAL_METHOD] = env[REQUEST_METHOD]
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">          env[REQUEST_METHOD] = method
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">        end
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">      end
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">
</li>
                
              </ol>
              

            <ol start="28" class="context-line">
              <li onclick="toggle('pre8340', 'post8340')">      @app.call(env)<span>...</span></li></ol>

              
              <ol start='29' class="post-context" id="post8340">
                
                <li onclick="toggle('pre8340', 'post8340')">    end
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">    def method_override(env)
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">      req = Request.new(env)
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">      method = method_override_param(req) ||
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">        env[HTTP_METHOD_OVERRIDE_HEADER]
</li>
                
                <li onclick="toggle('pre8340', 'post8340')">      begin
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;runtime.rb</code>: in <code>call</code>

          
          <div class="context" id="c8360">
              
              <ol start="17" class="pre-context" id="pre8360">
                
                <li onclick="toggle('pre8360', 'post8360')">      @app = app
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">      @header_name = HEADER_NAME
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">      @header_name += &quot;-#{name.to_s.downcase}&quot; if name
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">    end
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">    def call(env)
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">      start_time = Utils.clock_time
</li>
                
              </ol>
              

            <ol start="24" class="context-line">
              <li onclick="toggle('pre8360', 'post8360')">      _, headers, _ = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='25' class="post-context" id="post8360">
                
                <li onclick="toggle('pre8360', 'post8360')">
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">      request_time = Utils.clock_time - start_time
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">      unless headers.key?(@header_name)
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">        headers[@header_name] = FORMAT_STRING % request_time
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">      end
</li>
                
                <li onclick="toggle('pre8360', 'post8360')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;executor.rb</code>: in <code>call</code>

          
          <div class="context" id="c8380">
              
              <ol start="7" class="pre-context" id="pre8380">
                
                <li onclick="toggle('pre8380', 'post8380')">    def initialize(app, executor)
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">      @app, @executor = app, executor
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">    end
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">    def call(env)
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">      state = @executor.run!(reset: true)
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">      begin
</li>
                
              </ol>
              

            <ol start="14" class="context-line">
              <li onclick="toggle('pre8380', 'post8380')">        response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='15' class="post-context" id="post8380">
                
                <li onclick="toggle('pre8380', 'post8380')">        returned = response &lt;&lt; ::Rack::BodyProxy.new(response.pop) { state.complete! }
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">      rescue =&gt; error
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">        @executor.error_reporter.report(error, handled: false, source: &quot;application.action_dispatch&quot;)
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">        raise
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">      ensure
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">        state.complete! unless returned
</li>
                
                <li onclick="toggle('pre8380', 'post8380')">      end
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;static.rb</code>: in <code>call</code>

          
          <div class="context" id="c8400">
              
              <ol start="18" class="pre-context" id="pre8400">
                
                <li onclick="toggle('pre8400', 'post8400')">  class Static
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">    def initialize(app, path, index: &quot;index&quot;, headers: {})
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">      @app = app
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">      @file_handler = FileHandler.new(path, index: index, headers: headers)
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">    end
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">    def call(env)
</li>
                
              </ol>
              

            <ol start="25" class="context-line">
              <li onclick="toggle('pre8400', 'post8400')">      @file_handler.attempt(env) || @app.call(env)<span>...</span></li></ol>

              
              <ol start='26' class="post-context" id="post8400">
                
                <li onclick="toggle('pre8400', 'post8400')">    end
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">  end
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">  # = Action Dispatch \FileHandler
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">  #
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">  # This endpoint serves static files from disk using +Rack::Files+.
</li>
                
                <li onclick="toggle('pre8400', 'post8400')">  #
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;sendfile.rb</code>: in <code>call</code>

          
          <div class="context" id="c8420">
              
              <ol start="107" class="pre-context" id="pre8420">
                
                <li onclick="toggle('pre8420', 'post8420')">      @variation = variation
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">      @mappings = mappings.map do |internal, external|
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">        [&#x2F;^#{internal}&#x2F;i, external]
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">      end
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">    end
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">    def call(env)
</li>
                
              </ol>
              

            <ol start="114" class="context-line">
              <li onclick="toggle('pre8420', 'post8420')">      _, headers, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='115' class="post-context" id="post8420">
                
                <li onclick="toggle('pre8420', 'post8420')">
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">      if body.respond_to?(:to_path)
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">        case type = variation(env)
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">        when &#x2F;x-accel-redirect&#x2F;i
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">          path = ::File.expand_path(body.to_path)
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">          if url = map_accel_path(env, path)
</li>
                
                <li onclick="toggle('pre8420', 'post8420')">            headers[CONTENT_LENGTH] = &#x27;0&#x27;
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;host_authorization.rb</code>: in <code>call</code>

          
          <div class="context" id="c8440">
              
              <ol start="134" class="pre-context" id="pre8440">
                
                <li onclick="toggle('pre8440', 'post8440')">      return @app.call(env) if @permissions.empty?
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">      request = Request.new(env)
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">      hosts = blocked_hosts(request)
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">      if hosts.empty? || excluded?(request)
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">        mark_as_authorized(request)
</li>
                
              </ol>
              

            <ol start="141" class="context-line">
              <li onclick="toggle('pre8440', 'post8440')">        @app.call(env)<span>...</span></li></ol>

              
              <ol start='142' class="post-context" id="post8440">
                
                <li onclick="toggle('pre8440', 'post8440')">      else
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">        env[&quot;action_dispatch.blocked_hosts&quot;] = hosts
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">        @response_app.call(env)
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">      end
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">    end
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">
</li>
                
                <li onclick="toggle('pre8440', 'post8440')">    private
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;engine.rb</code>: in <code>call</code>

          
          <div class="context" id="c8460">
              
              <ol start="529" class="pre-context" id="pre8460">
                
                <li onclick="toggle('pre8460', 'post8460')">    def endpoint
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">      self.class.endpoint || routes
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">    end
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">    # Define the Rack API for this engine.
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">    def call(env)
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">      req = build_request env
</li>
                
              </ol>
              

            <ol start="536" class="context-line">
              <li onclick="toggle('pre8460', 'post8460')">      app.call req.env<span>...</span></li></ol>

              
              <ol start='537' class="post-context" id="post8460">
                
                <li onclick="toggle('pre8460', 'post8460')">    end
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">    # Defines additional Rack env configuration that is added on each call.
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">    def env_config
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">      @env_config ||= {}
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">    end
</li>
                
                <li onclick="toggle('pre8460', 'post8460')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;railtie.rb</code>: in <code>public_send</code>

          
          <div class="context" id="c8480">
              
              <ol start="219" class="pre-context" id="pre8480">
                
                <li onclick="toggle('pre8480', 'post8480')">          instance.respond_to?(name) || super
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">        end
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">        # If the class method does not have a method, then send the method call
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">        # to the Railtie instance.
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">        def method_missing(name, *args, &amp;block)
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">          if !abstract_railtie? &amp;&amp; instance.respond_to?(name)
</li>
                
              </ol>
              

            <ol start="226" class="context-line">
              <li onclick="toggle('pre8480', 'post8480')">            instance.public_send(name, *args, &amp;block)<span>...</span></li></ol>

              
              <ol start='227' class="post-context" id="post8480">
                
                <li onclick="toggle('pre8480', 'post8480')">          else
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">            super
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">          end
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">        end
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">        ruby2_keywords(:method_missing)
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">
</li>
                
                <li onclick="toggle('pre8480', 'post8480')">        # receives an instance variable identifier, set the variable value if is
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;railtie.rb</code>: in <code>method_missing</code>

          
          <div class="context" id="c8500">
              
              <ol start="219" class="pre-context" id="pre8500">
                
                <li onclick="toggle('pre8500', 'post8500')">          instance.respond_to?(name) || super
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">        end
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">        # If the class method does not have a method, then send the method call
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">        # to the Railtie instance.
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">        def method_missing(name, *args, &amp;block)
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">          if !abstract_railtie? &amp;&amp; instance.respond_to?(name)
</li>
                
              </ol>
              

            <ol start="226" class="context-line">
              <li onclick="toggle('pre8500', 'post8500')">            instance.public_send(name, *args, &amp;block)<span>...</span></li></ol>

              
              <ol start='227' class="post-context" id="post8500">
                
                <li onclick="toggle('pre8500', 'post8500')">          else
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">            super
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">          end
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">        end
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">        ruby2_keywords(:method_missing)
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">
</li>
                
                <li onclick="toggle('pre8500', 'post8500')">        # receives an instance variable identifier, set the variable value if is
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;tempfile_reaper.rb</code>: in <code>call</code>

          
          <div class="context" id="c8520">
              
              <ol start="13" class="pre-context" id="pre8520">
                
                <li onclick="toggle('pre8520', 'post8520')">      @app = app
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">    end
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">    def call(env)
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">      env[RACK_TEMPFILES] ||= []
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">      begin
</li>
                
              </ol>
              

            <ol start="20" class="context-line">
              <li onclick="toggle('pre8520', 'post8520')">        _, _, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='21' class="post-context" id="post8520">
                
                <li onclick="toggle('pre8520', 'post8520')">      rescue Exception
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">        env[RACK_TEMPFILES]&amp;.each(&amp;:close!)
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">        raise
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">      end
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">      response[2] = BodyProxy.new(body) do
</li>
                
                <li onclick="toggle('pre8520', 'post8520')">        env[RACK_TEMPFILES]&amp;.each(&amp;:close!)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;lint.rb</code>: in <code>response</code>

          
          <div class="context" id="c8540">
              
              <ol start="56" class="pre-context" id="pre8540">
                
                <li onclick="toggle('pre8540', 'post8540')">        raise LintError, &quot;No env given&quot; unless @env
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        check_environment(@env)
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        @env[RACK_INPUT] = InputWrapper.new(@env[RACK_INPUT])
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        @env[RACK_ERRORS] = ErrorWrapper.new(@env[RACK_ERRORS])
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        ## and returns a non-frozen Array of exactly three values:
</li>
                
              </ol>
              

            <ol start="63" class="context-line">
              <li onclick="toggle('pre8540', 'post8540')">        @response = @app.call(@env)<span>...</span></li></ol>

              
              <ol start='64' class="post-context" id="post8540">
                
                <li onclick="toggle('pre8540', 'post8540')">        raise LintError, &quot;response is not an Array, but #{@response.class}&quot; unless @response.kind_of? Array
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        raise LintError, &quot;response is frozen&quot; if @response.frozen?
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        raise LintError, &quot;response array has #{@response.size} elements instead of 3&quot; unless @response.size == 3
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        @status, @headers, @body = @response
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        ## The *status*,
</li>
                
                <li onclick="toggle('pre8540', 'post8540')">        check_status(@status)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;lint.rb</code>: in <code>call</code>

          
          <div class="context" id="c8560">
              
              <ol start="28" class="pre-context" id="pre8560">
                
                <li onclick="toggle('pre8560', 'post8560')">    ## after to catch all mistakes.
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">    ##
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">    ## = Rack applications
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">    ##
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">    ## A Rack application is a Ruby object (not a class) that
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">    ## responds to +call+.
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">    def call(env = nil)
</li>
                
              </ol>
              

            <ol start="35" class="context-line">
              <li onclick="toggle('pre8560', 'post8560')">      Wrapper.new(@app, env).response<span>...</span></li></ol>

              
              <ol start='36' class="post-context" id="post8560">
                
                <li onclick="toggle('pre8560', 'post8560')">    end
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">    class Wrapper
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">      def initialize(app, env)
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">        @app = app
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">        @env = env
</li>
                
                <li onclick="toggle('pre8560', 'post8560')">        @response = nil
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;show_exceptions.rb</code>: in <code>call</code>

          
          <div class="context" id="c8580">
              
              <ol start="20" class="pre-context" id="pre8580">
                
                <li onclick="toggle('pre8580', 'post8580')">    CONTEXT = 7
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">    def initialize(app)
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">      @app = app
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">    end
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">    def call(env)
</li>
                
              </ol>
              

            <ol start="27" class="context-line">
              <li onclick="toggle('pre8580', 'post8580')">      @app.call(env)<span>...</span></li></ol>

              
              <ol start='28' class="post-context" id="post8580">
                
                <li onclick="toggle('pre8580', 'post8580')">    rescue StandardError, LoadError, SyntaxError =&gt; e
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">      exception_string = dump_exception(e)
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">      env[RACK_ERRORS].puts(exception_string)
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">      env[RACK_ERRORS].flush
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">
</li>
                
                <li onclick="toggle('pre8580', 'post8580')">      if accepts_html?(env)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;common_logger.rb</code>: in <code>call</code>

          
          <div class="context" id="c8600">
              
              <ol start="36" class="pre-context" id="pre8600">
                
                <li onclick="toggle('pre8600', 'post8600')">    # will not be logged, so if exception handling middleware are used,
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">    # they should be loaded after this middleware.  Additionally, because
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">    # the logging happens after the request body has been fully sent, any
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">    # exceptions raised during the sending of the response body will
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">    # cause the request not to be logged.
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">    def call(env)
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">      began_at = Utils.clock_time
</li>
                
              </ol>
              

            <ol start="43" class="context-line">
              <li onclick="toggle('pre8600', 'post8600')">      status, headers, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='44' class="post-context" id="post8600">
                
                <li onclick="toggle('pre8600', 'post8600')">
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">      response[2] = BodyProxy.new(body) { log(env, status, headers, began_at) }
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">      response
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">    end
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">    private
</li>
                
                <li onclick="toggle('pre8600', 'post8600')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;content_length.rb</code>: in <code>call</code>

          
          <div class="context" id="c8620">
              
              <ol start="13" class="pre-context" id="pre8620">
                
                <li onclick="toggle('pre8620', 'post8620')">    include Rack::Utils
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">    def initialize(app)
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">      @app = app
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">    end
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">    def call(env)
</li>
                
              </ol>
              

            <ol start="20" class="context-line">
              <li onclick="toggle('pre8620', 'post8620')">      status, headers, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='21' class="post-context" id="post8620">
                
                <li onclick="toggle('pre8620', 'post8620')">
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">      if !STATUS_WITH_NO_ENTITY_BODY.key?(status.to_i) &amp;&amp;
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">         !headers[CONTENT_LENGTH] &amp;&amp;
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">         !headers[TRANSFER_ENCODING] &amp;&amp;
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">         body.respond_to?(:to_ary)
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">
</li>
                
                <li onclick="toggle('pre8620', 'post8620')">        response[2] = body = body.to_ary
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;configuration.rb</code>: in <code>call</code>

          
          <div class="context" id="c8640">
              
              <ol start="265" class="pre-context" id="pre8640">
                
                <li onclick="toggle('pre8640', 'post8640')">      def initialize(config, app)
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">        @config = config
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">        @app = app
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">      end
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">      def call(env)
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">        env[Const::PUMA_CONFIG] = @config
</li>
                
              </ol>
              

            <ol start="272" class="context-line">
              <li onclick="toggle('pre8640', 'post8640')">        @app.call(env)<span>...</span></li></ol>

              
              <ol start='273' class="post-context" id="post8640">
                
                <li onclick="toggle('pre8640', 'post8640')">      end
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">    end
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">    # Indicate if there is a properly configured app
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">    #
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">    def app_configured?
</li>
                
                <li onclick="toggle('pre8640', 'post8640')">      @options[:app] || File.exist?(rackup)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;request.rb</code>: in <code>block in handle_request</code>

          
          <div class="context" id="c8660">
              
              <ol start="93" class="pre-context" id="pre8660">
                
                <li onclick="toggle('pre8660', 'post8660')">      # array, we will invoke them when the request is done.
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">      #
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">      env[RACK_AFTER_REPLY] ||= []
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">      begin
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">        if @supported_http_methods == :any || @supported_http_methods.key?(env[REQUEST_METHOD])
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">          status, headers, app_body = @thread_pool.with_force_shutdown do
</li>
                
              </ol>
              

            <ol start="100" class="context-line">
              <li onclick="toggle('pre8660', 'post8660')">            @app.call(env)<span>...</span></li></ol>

              
              <ol start='101' class="post-context" id="post8660">
                
                <li onclick="toggle('pre8660', 'post8660')">          end
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">        else
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">          @log_writer.log &quot;Unsupported HTTP method used: #{env[REQUEST_METHOD]}&quot;
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">          status, headers, app_body = [501, {}, [&quot;#{env[REQUEST_METHOD]} method is not supported&quot;]]
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">        end
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">
</li>
                
                <li onclick="toggle('pre8660', 'post8660')">        # app_body needs to always be closed, hold value in case lowlevel_error
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;thread_pool.rb</code>: in <code>with_force_shutdown</code>

          
          <div class="context" id="c8680">
              
              <ol start="371" class="pre-context" id="pre8680">
                
                <li onclick="toggle('pre8680', 'post8680')">    # provided block if the thread is forced to shutdown during execution.
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">    def with_force_shutdown
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">      t = Thread.current
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">      @shutdown_mutex.synchronize do
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">        raise ForceShutdown if @force_shutdown
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">        t[:with_force_shutdown] = true
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">      end
</li>
                
              </ol>
              

            <ol start="378" class="context-line">
              <li onclick="toggle('pre8680', 'post8680')">      yield<span>...</span></li></ol>

              
              <ol start='379' class="post-context" id="post8680">
                
                <li onclick="toggle('pre8680', 'post8680')">    ensure
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">      t[:with_force_shutdown] = false
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">    end
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">    # Tell all threads in the pool to exit and wait for them to finish.
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">    # Wait +timeout+ seconds then raise +ForceShutdown+ in remaining threads.
</li>
                
                <li onclick="toggle('pre8680', 'post8680')">    # Next, wait an extra +@shutdown_grace_time+ seconds then force-kill remaining
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;request.rb</code>: in <code>handle_request</code>

          
          <div class="context" id="c8700">
              
              <ol start="92" class="pre-context" id="pre8700">
                
                <li onclick="toggle('pre8700', 'post8700')">      # A rack extension. If the app writes #call&#x27;ables to this
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">      # array, we will invoke them when the request is done.
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">      #
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">      env[RACK_AFTER_REPLY] ||= []
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">      begin
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">        if @supported_http_methods == :any || @supported_http_methods.key?(env[REQUEST_METHOD])
</li>
                
              </ol>
              

            <ol start="99" class="context-line">
              <li onclick="toggle('pre8700', 'post8700')">          status, headers, app_body = @thread_pool.with_force_shutdown do<span>...</span></li></ol>

              
              <ol start='100' class="post-context" id="post8700">
                
                <li onclick="toggle('pre8700', 'post8700')">            @app.call(env)
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">          end
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">        else
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">          @log_writer.log &quot;Unsupported HTTP method used: #{env[REQUEST_METHOD]}&quot;
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">          status, headers, app_body = [501, {}, [&quot;#{env[REQUEST_METHOD]} method is not supported&quot;]]
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">        end
</li>
                
                <li onclick="toggle('pre8700', 'post8700')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;server.rb</code>: in <code>process_client</code>

          
          <div class="context" id="c8720">
              
              <ol start="457" class="pre-context" id="pre8720">
                
                <li onclick="toggle('pre8720', 'post8720')">
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">        with_force_shutdown(client) do
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">          client.finish(@first_data_timeout)
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">        end
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">        while true
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">          @requests_count += 1
</li>
                
              </ol>
              

            <ol start="464" class="context-line">
              <li onclick="toggle('pre8720', 'post8720')">          case handle_request(client, requests + 1)<span>...</span></li></ol>

              
              <ol start='465' class="post-context" id="post8720">
                
                <li onclick="toggle('pre8720', 'post8720')">          when false
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">            break
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">          when :async
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">            close_socket = false
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">            break
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">          when true
</li>
                
                <li onclick="toggle('pre8720', 'post8720')">            ThreadPool.clean_thread_locals if clean_thread_locals
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;server.rb</code>: in <code>block in run</code>

          
          <div class="context" id="c8740">
              
              <ol start="238" class="pre-context" id="pre8740">
                
                <li onclick="toggle('pre8740', 'post8740')">    def run(background=true, thread_name: &#x27;srv&#x27;)
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">      BasicSocket.do_not_reverse_lookup = true
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">      @events.fire :state, :booting
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">      @status = :run
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">
</li>
                
              </ol>
              

            <ol start="245" class="context-line">
              <li onclick="toggle('pre8740', 'post8740')">      @thread_pool = ThreadPool.new(thread_name, @options) { |client| process_client client }<span>...</span></li></ol>

              
              <ol start='246' class="post-context" id="post8740">
                
                <li onclick="toggle('pre8740', 'post8740')">
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">      if @queue_requests
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">        @reactor = Reactor.new(@io_selector_backend) { |c| reactor_wakeup c }
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">        @reactor.run
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">      end
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">
</li>
                
                <li onclick="toggle('pre8740', 'post8740')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;thread_pool.rb</code>: in <code>block in spawn_thread</code>

          
          <div class="context" id="c8760">
              
              <ol start="148" class="pre-context" id="pre8760">
                
                <li onclick="toggle('pre8760', 'post8760')">          end
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">          if @clean_thread_locals
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">            ThreadPool.clean_thread_locals
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">          end
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">          begin
</li>
                
              </ol>
              

            <ol start="155" class="context-line">
              <li onclick="toggle('pre8760', 'post8760')">            @out_of_band_pending = true if block.call(work)<span>...</span></li></ol>

              
              <ol start='156' class="post-context" id="post8760">
                
                <li onclick="toggle('pre8760', 'post8760')">          rescue Exception =&gt; e
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">            STDERR.puts &quot;Error reached top of thread-pool: #{e.message} (#{e.class})&quot;
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">          end
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">        end
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">      end
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">
</li>
                
                <li onclick="toggle('pre8760', 'post8760')">      @workers &lt;&lt; th
</li>
                
              </ol>
              
          </div>
          
      </li>

  </ul>
</div>

<div id="requestinfo">
  <h2>Request information</h2>

  <h3 id="get-info">GET</h3>
  
    <p>No GET data.</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data.</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data.</p>
  

  <h3 id="env-info">Rack ENV</h3>
    <table class="req">
      <thead>
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
          
          <tr>
            <td>GATEWAY_INTERFACE</td>
            <td class="code"><div>&quot;CGI&#x2F;1.2&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_ACCEPT</td>
            <td class="code"><div>&quot;*&#x2F;*&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_AUTHORIZATION</td>
            <td class="code"><div>&quot;Basic dXNlcm5hbWU6cGFzc3dvcmQ=&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_HOST</td>
            <td class="code"><div>&quot;localhost:9292&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_USER_AGENT</td>
            <td class="code"><div>&quot;curl&#x2F;8.4.0&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_VERSION</td>
            <td class="code"><div>&quot;HTTP&#x2F;1.1&quot;</div></td>
          </tr>
          
          <tr>
            <td>ORIGINAL_FULLPATH</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>ORIGINAL_SCRIPT_NAME</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>PATH_INFO</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>QUERY_STRING</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>REMOTE_ADDR</td>
            <td class="code"><div>&quot;::1&quot;</div></td>
          </tr>
          
          <tr>
            <td>REQUEST_METHOD</td>
            <td class="code"><div>&quot;GET&quot;</div></td>
          </tr>
          
          <tr>
            <td>REQUEST_PATH</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>REQUEST_URI</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>ROUTES_5460_SCRIPT_NAME</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>SCRIPT_NAME</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_NAME</td>
            <td class="code"><div>&quot;localhost&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_PORT</td>
            <td class="code"><div>&quot;9292&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_PROTOCOL</td>
            <td class="code"><div>&quot;HTTP&#x2F;1.1&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_SOFTWARE</td>
            <td class="code"><div>&quot;puma 6.4.2 The Eagle of Durango&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.authenticated_encrypted_cookie_salt</td>
            <td class="code"><div>&quot;authenticated encrypted cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.authorized_host</td>
            <td class="code"><div>&quot;localhost&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.backtrace_cleaner</td>
            <td class="code"><div>#&lt;Rails::BacktraceCleaner:0x0000000124d90538 @silencers=[#&lt;Proc:0x0000000124d90100 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;activesupport-7.1.3&#x2F;lib&#x2F;active_support&#x2F;backtrace_cleaner.rb:120&gt;, #&lt;Proc:0x0000000124d90060 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;activesupport-7.1.3&#x2F;lib&#x2F;active_support&#x2F;backtrace_cleaner.rb:124&gt;, #&lt;Proc:0x000000028873fde0 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;backtrace_cleaner.rb:24&gt;], @filters=[#&lt;Proc:0x0000000124d901c8 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;activesupport-7.1.3&#x2F;lib&#x2F;active_support&#x2F;backtrace_cleaner.rb:116&gt;, #&lt;Proc:0x000000028873fe30 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;backtrace_cleaner.rb:14&gt;, #&lt;Proc:0x000000028873fe08 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;backtrace_cleaner.rb:17&gt;], @root=&quot;&#x2F;Users&#x2F;daviddoolin&#x2F;src&#x2F;nplus1&#x2F;&quot;&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy_nonce_directives</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy_nonce_generator</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy_report_only</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_digest</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_rotations</td>
            <td class="code"><div>#&lt;ActiveSupport::Messages::RotationConfiguration:0x0000000123a50928 @signed=[], @encrypted=[]&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_same_site_protection</td>
            <td class="code"><div>#&lt;Proc:0x000000028873f020 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;application.rb:705&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_serializer</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.debug_exception_log_level</td>
            <td class="code"><div>4</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.encrypted_cookie_cipher</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.encrypted_cookie_salt</td>
            <td class="code"><div>&quot;encrypted cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.encrypted_signed_cookie_salt</td>
            <td class="code"><div>&quot;signed encrypted cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.http_auth_salt</td>
            <td class="code"><div>&quot;http authentication&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.key_generator</td>
            <td class="code"><div>#&lt;ActiveSupport::CachingKeyGenerator:0x000000028873fac0 @key_generator=#&lt;ActiveSupport::KeyGenerator:0x00000000002f58&gt;, @cache_keys=#&lt;Concurrent::Map:0x000000028873fa48 entries=0 default_proc=nil&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.log_rescued_responses</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.logger</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.parameter_filter</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.permissions_policy</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.redirect_filter</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.remote_ip</td>
            <td class="code"><div>#&lt;ActionDispatch::RemoteIp::GetIp:0x0000000297e7e700 @req=#&lt;ActionDispatch::Request GET &quot;http:&#x2F;&#x2F;localhost:9292&#x2F;&quot; for ::1&gt;, @check_ip=true, @proxies=[#&lt;IPAddr: IPv4:127.0.0.0&#x2F;255.0.0.0&gt;, #&lt;IPAddr: IPv6:0000:0000:0000:0000:0000:0000:0000:0001&#x2F;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&gt;, #&lt;IPAddr: IPv6:fc00:0000:0000:0000:0000:0000:0000:0000&#x2F;fe00:0000:0000:0000:0000:0000:0000:0000&gt;, #&lt;IPAddr: IPv4:10.0.0.0&#x2F;255.0.0.0&gt;, #&lt;IPAddr: IPv4:172.16.0.0&#x2F;255.240.0.0&gt;, #&lt;IPAddr: IPv4:192.168.0.0&#x2F;255.255.0.0&gt;]&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.request_id</td>
            <td class="code"><div>&quot;2edbd78c-2aac-435f-8001-cdbf219cc753&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.routes</td>
            <td class="code"><div>#&lt;ActionDispatch::Routing::RouteSet:0x0000000113e80828&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.secret_key_base</td>
            <td class="code"><div>&quot;i_am_a_secret&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.show_detailed_exceptions</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.show_exceptions</td>
            <td class="code"><div>:all</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.signed_cookie_digest</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.signed_cookie_salt</td>
            <td class="code"><div>&quot;signed cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.use_authenticated_cookie_encryption</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.use_cookies_with_metadata</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>puma.config</td>
            <td class="code"><div>#&lt;Puma::Configuration:0x00000001239d8810 @options=#&lt;Puma::UserFileDefaultOptions:0x0000000124d9fb00 @user_options={:environment=&gt;&quot;development&quot;, :pid=&gt;nil, :Port=&gt;9292, :Host=&gt;&quot;localhost&quot;, :AccessLog=&gt;[], :config=&gt;&quot;&#x2F;Users&#x2F;daviddoolin&#x2F;src&#x2F;nplus1&#x2F;rails_ringle_file.ru&quot;, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;localhost:9292&quot;], :app=&gt;#&lt;Rack::ContentLength:0x00000001248fec40 @app=#&lt;Rack::CommonLogger:0x00000001248fed30 @app=#&lt;Rack::ShowExceptions:0x00000001247d4b30 @app=#&lt;Rack::Lint:0x00000001247d4c70 @app=#&lt;Rack::TempfileReaper:0x00000001247d4d10 @app=App&gt;&gt;&gt;, @logger=#&lt;IO:&lt;STDERR&gt;&gt;&gt;&gt;, :log_writer=&gt;#&lt;Puma::LogWriter:0x00000001239d8630 @formatter=#&lt;Puma::LogWriter::DefaultFormatter:0x0000000124d9e9f8&gt;, @custom_logger=nil, @stdout=#&lt;IO:&lt;STDOUT&gt;&gt;, @stderr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false, @error_logger=#&lt;Puma::ErrorLogger:0x0000000124d9e9d0 @ioerr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false&gt;&gt;}, @file_options={}, @default_options={:auto_trim_time=&gt;30, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;0.0.0.0:9292&quot;], :clean_thread_locals=&gt;false, :debug=&gt;false, :early_hints=&gt;nil, :environment=&gt;&quot;development&quot;, :first_data_timeout=&gt;30, :idle_timeout=&gt;nil, :io_selector_backend=&gt;:auto, :log_requests=&gt;false, :logger=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :max_fast_inline=&gt;10, :max_threads=&gt;5, :min_threads=&gt;0, :mode=&gt;:http, :mutate_stdout_and_stderr_to_sync_on_write=&gt;true, :out_of_band=&gt;[], :persistent_timeout=&gt;20, :queue_requests=&gt;true, :rackup=&gt;&quot;config.ru&quot;, :raise_exception_on_sigterm=&gt;true, :reaping_time=&gt;1, :remote_address=&gt;:socket, :silence_single_worker_warning=&gt;false, :silence_fork_callback_warning=&gt;false, :tag=&gt;&quot;nplus1&quot;, :tcp_host=&gt;&quot;0.0.0.0&quot;, :tcp_port=&gt;9292, :wait_for_less_busy_worker=&gt;0.005, :worker_boot_timeout=&gt;60, :worker_check_interval=&gt;5, :worker_culling_strategy=&gt;:youngest, :worker_shutdown_timeout=&gt;30, :worker_timeout=&gt;60, :workers=&gt;0, :http_content_length_limit=&gt;nil, :Verbose=&gt;false, :Silent=&gt;false, :events=&gt;#&lt;Puma::Events:0x0000000124d9ffb0 @hooks={:state=&gt;[], :on_booted=&gt;[]}&gt;, :preload_app=&gt;false}&gt;, @plugins=#&lt;Puma::PluginLoader:0x0000000124d9fa10 @instances=[]&gt;, @user_dsl=#&lt;Puma::DSL:0x0000000124d9f8d0 @config=#&lt;Puma::Configuration:0x00000001239d8810 ...&gt;, @options={:environment=&gt;&quot;development&quot;, :pid=&gt;nil, :Port=&gt;9292, :Host=&gt;&quot;localhost&quot;, :AccessLog=&gt;[], :config=&gt;&quot;&#x2F;Users&#x2F;daviddoolin&#x2F;src&#x2F;nplus1&#x2F;rails_ringle_file.ru&quot;, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;localhost:9292&quot;], :app=&gt;#&lt;Rack::ContentLength:0x00000001248fec40 @app=#&lt;Rack::CommonLogger:0x00000001248fed30 @app=#&lt;Rack::ShowExceptions:0x00000001247d4b30 @app=#&lt;Rack::Lint:0x00000001247d4c70 @app=#&lt;Rack::TempfileReaper:0x00000001247d4d10 @app=App&gt;&gt;&gt;, @logger=#&lt;IO:&lt;STDERR&gt;&gt;&gt;&gt;, :log_writer=&gt;#&lt;Puma::LogWriter:0x00000001239d8630 @formatter=#&lt;Puma::LogWriter::DefaultFormatter:0x0000000124d9e9f8&gt;, @custom_logger=nil, @stdout=#&lt;IO:&lt;STDOUT&gt;&gt;, @stderr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false, @error_logger=#&lt;Puma::ErrorLogger:0x0000000124d9e9d0 @ioerr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false&gt;&gt;}, @plugins=[]&gt;, @file_dsl=#&lt;Puma::DSL:0x0000000124d9f808 @config=#&lt;Puma::Configuration:0x00000001239d8810 ...&gt;, @options={}, @plugins=[]&gt;, @default_dsl=#&lt;Puma::DSL:0x0000000124d9f718 @config=#&lt;Puma::Configuration:0x00000001239d8810 ...&gt;, @options={:auto_trim_time=&gt;30, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;0.0.0.0:9292&quot;], :clean_thread_locals=&gt;false, :debug=&gt;false, :early_hints=&gt;nil, :environment=&gt;&quot;development&quot;, :first_data_timeout=&gt;30, :idle_timeout=&gt;nil, :io_selector_backend=&gt;:auto, :log_requests=&gt;false, :logger=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :max_fast_inline=&gt;10, :max_threads=&gt;5, :min_threads=&gt;0, :mode=&gt;:http, :mutate_stdout_and_stderr_to_sync_on_write=&gt;true, :out_of_band=&gt;[], :persistent_timeout=&gt;20, :queue_requests=&gt;true, :rackup=&gt;&quot;config.ru&quot;, :raise_exception_on_sigterm=&gt;true, :reaping_time=&gt;1, :remote_address=&gt;:socket, :silence_single_worker_warning=&gt;false, :silence_fork_callback_warning=&gt;false, :tag=&gt;&quot;nplus1&quot;, :tcp_host=&gt;&quot;0.0.0.0&quot;, :tcp_port=&gt;9292, :wait_for_less_busy_worker=&gt;0.005, :worker_boot_timeout=&gt;60, :worker_check_interval=&gt;5, :worker_culling_strategy=&gt;:youngest, :worker_shutdown_timeout=&gt;30, :worker_timeout=&gt;60, :workers=&gt;0, :http_content_length_limit=&gt;nil, :Verbose=&gt;false, :Silent=&gt;false, :events=&gt;#&lt;Puma::Events:0x0000000124d9ffb0 @hooks={:state=&gt;[], :on_booted=&gt;[]}&gt;, :preload_app=&gt;false}, @plugins=[]&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>puma.request_body_wait</td>
            <td class="code"><div>0.016000032424926758</div></td>
          </tr>
          
          <tr>
            <td>puma.socket</td>
            <td class="code"><div>#&lt;TCPSocket:fd 18, AF_INET6, ::1, 9292&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.after_reply</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>rack.errors</td>
            <td class="code"><div>#&lt;Rack::Lint::Wrapper::ErrorWrapper:0x00000001685f6680 @error=#&lt;IO:&lt;STDERR&gt;&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.hijack</td>
            <td class="code"><div>#&lt;Proc:0x00000001685f6860 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;lint.rb:556&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.hijack?</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>rack.input</td>
            <td class="code"><div>#&lt;Rack::Lint::Wrapper::InputWrapper:0x00000001685f66f8 @input=#&lt;Puma::NullIO:0x0000000124b5be48&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.multiprocess</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>rack.multithread</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>rack.request.cookie_hash</td>
            <td class="code"><div>{}</div></td>
          </tr>
          
          <tr>
            <td>rack.request.form_hash</td>
            <td class="code"><div>{}</div></td>
          </tr>
          
          <tr>
            <td>rack.request.form_input</td>
            <td class="code"><div>#&lt;Rack::Lint::Wrapper::InputWrapper:0x00000001685f66f8 @input=#&lt;Puma::NullIO:0x0000000124b5be48&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.request.query_hash</td>
            <td class="code"><div>{}</div></td>
          </tr>
          
          <tr>
            <td>rack.request.query_string</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>rack.run_once</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>rack.tempfiles</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>rack.url_scheme</td>
            <td class="code"><div>&quot;http&quot;</div></td>
          </tr>
          
          <tr>
            <td>rack.version</td>
            <td class="code"><div>[1, 6]</div></td>
          </tr>
          
      </tbody>
    </table>

</div>

<div id="explanation">
  <p>
    You're seeing this error because you use <code>Rack::ShowExceptions</code>.
  </p>
</div>

</body>
</html>


------------------------------------------
Unauthorized
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="robots" content="NONE,NOARCHIVE" />
  <title>NoMethodError at &#x2F;</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    table {
        border:1px solid #ccc; border-collapse: collapse; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
        padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
        font-weight:normal; font-size:11px; border:1px solid #ddd; }
    tbody th { text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%;}
    table td.code div { overflow:hidden; }
    table.source th { color:#666; }
    table.source td {
        font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; }
    ul.traceback li.frame { margin-bottom:1em; }
    div.context { margin: 10px 0; }
    div.context ol {
        padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li {
        font-family:monospace; white-space:pre; color:#666; cursor:pointer; }
    div.context ol.context-line li { color:black; background-color:#ccc; }
    div.context ol.context-line li span { float: right; }
    div.commands { margin-left: 40px; }
    div.commands a { color:black; text-decoration:none; }
    #summary { background: #ffc; }
    #summary h2 { font-family: monospace; font-weight: normal; color: #666; white-space: pre-wrap; }
    #summary ul#quicklinks { list-style-type: none; margin-bottom: 2em; }
    #summary ul#quicklinks li { float: left; padding: 0 1em; }
    #summary ul#quicklinks>li+li { border-left: 1px #666 solid; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 0 20px; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
  </style>
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon;
        // Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\\-");
        var oRegExp = new RegExp("(^|\\s)" + strClassName + "(\\s|$$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block' : 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.innerHTML = s.innerHTML == uarr ? darr : uarr;
      return false;
    }
    //-->
  </script>
</head>
<body>

<div id="summary">
  <h1>NoMethodError at &#x2F;</h1>

  <h2>undefined method `info&#x27; for nil (NoMethodError)

          logger.info { started_request_message(request) }
                ^^^^^</h2>

  <table><tr>
    <th>Ruby</th>
    <td>

      <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;rack&#x2F;logger.rb</code>: in <code>call_app</code>, line 36

    </td>
  </tr><tr>
    <th>Web</th>
    <td><code>GET localhost&#x2F;</code></td>
  </tr></table>

  <h3>Jump to:</h3>
  <ul id="quicklinks">
    <li><a href="#get-info">GET</a></li>
    <li><a href="#post-info">POST</a></li>
    <li><a href="#cookie-info">Cookies</a></li>
    <li><a href="#env-info">ENV</a></li>
  </ul>
</div>

<div id="traceback">
  <h2>Traceback <span>(innermost first)</span></h2>
  <ul class="traceback">

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;rack&#x2F;logger.rb</code>: in <code>call_app</code>

          
          <div class="context" id="c8800">
              
              <ol start="29" class="pre-context" id="pre8800">
                
                <li onclick="toggle('pre8800', 'post8800')">
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">      private
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">        def call_app(request, env) # :doc:
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">          instrumenter = ActiveSupport::Notifications.instrumenter
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">          handle = instrumenter.build_handle(&quot;request.action_dispatch&quot;, { request: request })
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">          handle.start
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">
</li>
                
              </ol>
              

            <ol start="36" class="context-line">
              <li onclick="toggle('pre8800', 'post8800')">          logger.info { started_request_message(request) }<span>...</span></li></ol>

              
              <ol start='37' class="post-context" id="post8800">
                
                <li onclick="toggle('pre8800', 'post8800')">          status, headers, body = response = @app.call(env)
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">          body = ::Rack::BodyProxy.new(body, &amp;handle.method(:finish))
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">          if response.frozen?
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">            [status, headers, body]
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">          else
</li>
                
                <li onclick="toggle('pre8800', 'post8800')">            response[2] = body
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;rack&#x2F;logger.rb</code>: in <code>call</code>

          
          <div class="context" id="c8820">
              
              <ol start="19" class="pre-context" id="pre8820">
                
                <li onclick="toggle('pre8820', 'post8820')">
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">      def call(env)
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">        request = ActionDispatch::Request.new(env)
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">        if logger.respond_to?(:tagged)
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">          logger.tagged(*compute_tags(request)) { call_app(request, env) }
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">        else
</li>
                
              </ol>
              

            <ol start="26" class="context-line">
              <li onclick="toggle('pre8820', 'post8820')">          call_app(request, env)<span>...</span></li></ol>

              
              <ol start='27' class="post-context" id="post8820">
                
                <li onclick="toggle('pre8820', 'post8820')">        end
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">      end
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">      private
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">        def call_app(request, env) # :doc:
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">          instrumenter = ActiveSupport::Notifications.instrumenter
</li>
                
                <li onclick="toggle('pre8820', 'post8820')">          handle = instrumenter.build_handle(&quot;request.action_dispatch&quot;, { request: request })
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;remote_ip.rb</code>: in <code>call</code>

          
          <div class="context" id="c8840">
              
              <ol start="85" class="pre-context" id="pre8840">
                
                <li onclick="toggle('pre8840', 'post8840')">    # Since the IP address may not be needed, we store the object here
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    # without calculating the IP to keep from slowing down the majority of
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    # requests. For those requests that do need to know the IP, the
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    # GetIp#calculate_ip method will calculate the memoized client IP address.
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    def call(env)
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">      req = ActionDispatch::Request.new env
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">      req.remote_ip = GetIp.new(req, check_ip, proxies)
</li>
                
              </ol>
              

            <ol start="92" class="context-line">
              <li onclick="toggle('pre8840', 'post8840')">      @app.call(req.env)<span>...</span></li></ol>

              
              <ol start='93' class="post-context" id="post8840">
                
                <li onclick="toggle('pre8840', 'post8840')">    end
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    # The GetIp class exists as a way to defer processing of the request data
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    # into an actual IP address. If the ActionDispatch::Request#remote_ip method
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    # is called, this class will calculate the value and then memoize it.
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">    class GetIp
</li>
                
                <li onclick="toggle('pre8840', 'post8840')">      def initialize(req, check_ip, proxies)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;request_id.rb</code>: in <code>call</code>

          
          <div class="context" id="c8860">
              
              <ol start="21" class="pre-context" id="pre8860">
                
                <li onclick="toggle('pre8860', 'post8860')">      @app = app
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">      @header = header
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">    end
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">    def call(env)
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">      req = ActionDispatch::Request.new env
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">      req.request_id = make_request_id(req.headers[@header])
</li>
                
              </ol>
              

            <ol start="28" class="context-line">
              <li onclick="toggle('pre8860', 'post8860')">      @app.call(env).tap { |_status, headers, _body| headers[@header] = req.request_id }<span>...</span></li></ol>

              
              <ol start='29' class="post-context" id="post8860">
                
                <li onclick="toggle('pre8860', 'post8860')">    end
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">    private
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">      def make_request_id(request_id)
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">        if request_id.presence
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">          request_id.gsub(&#x2F;[^\w\-@]&#x2F;, &quot;&quot;).first(255)
</li>
                
                <li onclick="toggle('pre8860', 'post8860')">        else
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;method_override.rb</code>: in <code>call</code>

          
          <div class="context" id="c8880">
              
              <ol start="21" class="pre-context" id="pre8880">
                
                <li onclick="toggle('pre8880', 'post8880')">        method = method_override(env)
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">        if HTTP_METHODS.include?(method)
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">          env[RACK_METHODOVERRIDE_ORIGINAL_METHOD] = env[REQUEST_METHOD]
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">          env[REQUEST_METHOD] = method
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">        end
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">      end
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">
</li>
                
              </ol>
              

            <ol start="28" class="context-line">
              <li onclick="toggle('pre8880', 'post8880')">      @app.call(env)<span>...</span></li></ol>

              
              <ol start='29' class="post-context" id="post8880">
                
                <li onclick="toggle('pre8880', 'post8880')">    end
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">    def method_override(env)
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">      req = Request.new(env)
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">      method = method_override_param(req) ||
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">        env[HTTP_METHOD_OVERRIDE_HEADER]
</li>
                
                <li onclick="toggle('pre8880', 'post8880')">      begin
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;runtime.rb</code>: in <code>call</code>

          
          <div class="context" id="c8900">
              
              <ol start="17" class="pre-context" id="pre8900">
                
                <li onclick="toggle('pre8900', 'post8900')">      @app = app
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">      @header_name = HEADER_NAME
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">      @header_name += &quot;-#{name.to_s.downcase}&quot; if name
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">    end
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">    def call(env)
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">      start_time = Utils.clock_time
</li>
                
              </ol>
              

            <ol start="24" class="context-line">
              <li onclick="toggle('pre8900', 'post8900')">      _, headers, _ = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='25' class="post-context" id="post8900">
                
                <li onclick="toggle('pre8900', 'post8900')">
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">      request_time = Utils.clock_time - start_time
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">      unless headers.key?(@header_name)
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">        headers[@header_name] = FORMAT_STRING % request_time
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">      end
</li>
                
                <li onclick="toggle('pre8900', 'post8900')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;executor.rb</code>: in <code>call</code>

          
          <div class="context" id="c8920">
              
              <ol start="7" class="pre-context" id="pre8920">
                
                <li onclick="toggle('pre8920', 'post8920')">    def initialize(app, executor)
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">      @app, @executor = app, executor
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">    end
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">    def call(env)
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">      state = @executor.run!(reset: true)
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">      begin
</li>
                
              </ol>
              

            <ol start="14" class="context-line">
              <li onclick="toggle('pre8920', 'post8920')">        response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='15' class="post-context" id="post8920">
                
                <li onclick="toggle('pre8920', 'post8920')">        returned = response &lt;&lt; ::Rack::BodyProxy.new(response.pop) { state.complete! }
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">      rescue =&gt; error
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">        @executor.error_reporter.report(error, handled: false, source: &quot;application.action_dispatch&quot;)
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">        raise
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">      ensure
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">        state.complete! unless returned
</li>
                
                <li onclick="toggle('pre8920', 'post8920')">      end
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;static.rb</code>: in <code>call</code>

          
          <div class="context" id="c8940">
              
              <ol start="18" class="pre-context" id="pre8940">
                
                <li onclick="toggle('pre8940', 'post8940')">  class Static
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">    def initialize(app, path, index: &quot;index&quot;, headers: {})
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">      @app = app
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">      @file_handler = FileHandler.new(path, index: index, headers: headers)
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">    end
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">    def call(env)
</li>
                
              </ol>
              

            <ol start="25" class="context-line">
              <li onclick="toggle('pre8940', 'post8940')">      @file_handler.attempt(env) || @app.call(env)<span>...</span></li></ol>

              
              <ol start='26' class="post-context" id="post8940">
                
                <li onclick="toggle('pre8940', 'post8940')">    end
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">  end
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">  # = Action Dispatch \FileHandler
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">  #
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">  # This endpoint serves static files from disk using +Rack::Files+.
</li>
                
                <li onclick="toggle('pre8940', 'post8940')">  #
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;sendfile.rb</code>: in <code>call</code>

          
          <div class="context" id="c8960">
              
              <ol start="107" class="pre-context" id="pre8960">
                
                <li onclick="toggle('pre8960', 'post8960')">      @variation = variation
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">      @mappings = mappings.map do |internal, external|
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">        [&#x2F;^#{internal}&#x2F;i, external]
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">      end
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">    end
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">    def call(env)
</li>
                
              </ol>
              

            <ol start="114" class="context-line">
              <li onclick="toggle('pre8960', 'post8960')">      _, headers, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='115' class="post-context" id="post8960">
                
                <li onclick="toggle('pre8960', 'post8960')">
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">      if body.respond_to?(:to_path)
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">        case type = variation(env)
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">        when &#x2F;x-accel-redirect&#x2F;i
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">          path = ::File.expand_path(body.to_path)
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">          if url = map_accel_path(env, path)
</li>
                
                <li onclick="toggle('pre8960', 'post8960')">            headers[CONTENT_LENGTH] = &#x27;0&#x27;
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;actionpack-7.1.3&#x2F;lib&#x2F;action_dispatch&#x2F;middleware&#x2F;host_authorization.rb</code>: in <code>call</code>

          
          <div class="context" id="c8980">
              
              <ol start="134" class="pre-context" id="pre8980">
                
                <li onclick="toggle('pre8980', 'post8980')">      return @app.call(env) if @permissions.empty?
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">      request = Request.new(env)
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">      hosts = blocked_hosts(request)
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">      if hosts.empty? || excluded?(request)
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">        mark_as_authorized(request)
</li>
                
              </ol>
              

            <ol start="141" class="context-line">
              <li onclick="toggle('pre8980', 'post8980')">        @app.call(env)<span>...</span></li></ol>

              
              <ol start='142' class="post-context" id="post8980">
                
                <li onclick="toggle('pre8980', 'post8980')">      else
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">        env[&quot;action_dispatch.blocked_hosts&quot;] = hosts
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">        @response_app.call(env)
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">      end
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">    end
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">
</li>
                
                <li onclick="toggle('pre8980', 'post8980')">    private
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;engine.rb</code>: in <code>call</code>

          
          <div class="context" id="c9000">
              
              <ol start="529" class="pre-context" id="pre9000">
                
                <li onclick="toggle('pre9000', 'post9000')">    def endpoint
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">      self.class.endpoint || routes
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">    end
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">    # Define the Rack API for this engine.
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">    def call(env)
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">      req = build_request env
</li>
                
              </ol>
              

            <ol start="536" class="context-line">
              <li onclick="toggle('pre9000', 'post9000')">      app.call req.env<span>...</span></li></ol>

              
              <ol start='537' class="post-context" id="post9000">
                
                <li onclick="toggle('pre9000', 'post9000')">    end
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">    # Defines additional Rack env configuration that is added on each call.
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">    def env_config
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">      @env_config ||= {}
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">    end
</li>
                
                <li onclick="toggle('pre9000', 'post9000')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;railtie.rb</code>: in <code>public_send</code>

          
          <div class="context" id="c9020">
              
              <ol start="219" class="pre-context" id="pre9020">
                
                <li onclick="toggle('pre9020', 'post9020')">          instance.respond_to?(name) || super
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">        end
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">        # If the class method does not have a method, then send the method call
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">        # to the Railtie instance.
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">        def method_missing(name, *args, &amp;block)
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">          if !abstract_railtie? &amp;&amp; instance.respond_to?(name)
</li>
                
              </ol>
              

            <ol start="226" class="context-line">
              <li onclick="toggle('pre9020', 'post9020')">            instance.public_send(name, *args, &amp;block)<span>...</span></li></ol>

              
              <ol start='227' class="post-context" id="post9020">
                
                <li onclick="toggle('pre9020', 'post9020')">          else
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">            super
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">          end
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">        end
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">        ruby2_keywords(:method_missing)
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">
</li>
                
                <li onclick="toggle('pre9020', 'post9020')">        # receives an instance variable identifier, set the variable value if is
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;railtie.rb</code>: in <code>method_missing</code>

          
          <div class="context" id="c9040">
              
              <ol start="219" class="pre-context" id="pre9040">
                
                <li onclick="toggle('pre9040', 'post9040')">          instance.respond_to?(name) || super
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">        end
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">        # If the class method does not have a method, then send the method call
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">        # to the Railtie instance.
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">        def method_missing(name, *args, &amp;block)
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">          if !abstract_railtie? &amp;&amp; instance.respond_to?(name)
</li>
                
              </ol>
              

            <ol start="226" class="context-line">
              <li onclick="toggle('pre9040', 'post9040')">            instance.public_send(name, *args, &amp;block)<span>...</span></li></ol>

              
              <ol start='227' class="post-context" id="post9040">
                
                <li onclick="toggle('pre9040', 'post9040')">          else
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">            super
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">          end
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">        end
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">        ruby2_keywords(:method_missing)
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">
</li>
                
                <li onclick="toggle('pre9040', 'post9040')">        # receives an instance variable identifier, set the variable value if is
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;tempfile_reaper.rb</code>: in <code>call</code>

          
          <div class="context" id="c9060">
              
              <ol start="13" class="pre-context" id="pre9060">
                
                <li onclick="toggle('pre9060', 'post9060')">      @app = app
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">    end
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">    def call(env)
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">      env[RACK_TEMPFILES] ||= []
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">      begin
</li>
                
              </ol>
              

            <ol start="20" class="context-line">
              <li onclick="toggle('pre9060', 'post9060')">        _, _, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='21' class="post-context" id="post9060">
                
                <li onclick="toggle('pre9060', 'post9060')">      rescue Exception
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">        env[RACK_TEMPFILES]&amp;.each(&amp;:close!)
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">        raise
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">      end
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">      response[2] = BodyProxy.new(body) do
</li>
                
                <li onclick="toggle('pre9060', 'post9060')">        env[RACK_TEMPFILES]&amp;.each(&amp;:close!)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;lint.rb</code>: in <code>response</code>

          
          <div class="context" id="c9080">
              
              <ol start="56" class="pre-context" id="pre9080">
                
                <li onclick="toggle('pre9080', 'post9080')">        raise LintError, &quot;No env given&quot; unless @env
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        check_environment(@env)
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        @env[RACK_INPUT] = InputWrapper.new(@env[RACK_INPUT])
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        @env[RACK_ERRORS] = ErrorWrapper.new(@env[RACK_ERRORS])
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        ## and returns a non-frozen Array of exactly three values:
</li>
                
              </ol>
              

            <ol start="63" class="context-line">
              <li onclick="toggle('pre9080', 'post9080')">        @response = @app.call(@env)<span>...</span></li></ol>

              
              <ol start='64' class="post-context" id="post9080">
                
                <li onclick="toggle('pre9080', 'post9080')">        raise LintError, &quot;response is not an Array, but #{@response.class}&quot; unless @response.kind_of? Array
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        raise LintError, &quot;response is frozen&quot; if @response.frozen?
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        raise LintError, &quot;response array has #{@response.size} elements instead of 3&quot; unless @response.size == 3
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        @status, @headers, @body = @response
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        ## The *status*,
</li>
                
                <li onclick="toggle('pre9080', 'post9080')">        check_status(@status)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;lint.rb</code>: in <code>call</code>

          
          <div class="context" id="c9100">
              
              <ol start="28" class="pre-context" id="pre9100">
                
                <li onclick="toggle('pre9100', 'post9100')">    ## after to catch all mistakes.
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">    ##
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">    ## = Rack applications
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">    ##
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">    ## A Rack application is a Ruby object (not a class) that
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">    ## responds to +call+.
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">    def call(env = nil)
</li>
                
              </ol>
              

            <ol start="35" class="context-line">
              <li onclick="toggle('pre9100', 'post9100')">      Wrapper.new(@app, env).response<span>...</span></li></ol>

              
              <ol start='36' class="post-context" id="post9100">
                
                <li onclick="toggle('pre9100', 'post9100')">    end
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">    class Wrapper
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">      def initialize(app, env)
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">        @app = app
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">        @env = env
</li>
                
                <li onclick="toggle('pre9100', 'post9100')">        @response = nil
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;show_exceptions.rb</code>: in <code>call</code>

          
          <div class="context" id="c9120">
              
              <ol start="20" class="pre-context" id="pre9120">
                
                <li onclick="toggle('pre9120', 'post9120')">    CONTEXT = 7
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">    def initialize(app)
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">      @app = app
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">    end
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">    def call(env)
</li>
                
              </ol>
              

            <ol start="27" class="context-line">
              <li onclick="toggle('pre9120', 'post9120')">      @app.call(env)<span>...</span></li></ol>

              
              <ol start='28' class="post-context" id="post9120">
                
                <li onclick="toggle('pre9120', 'post9120')">    rescue StandardError, LoadError, SyntaxError =&gt; e
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">      exception_string = dump_exception(e)
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">      env[RACK_ERRORS].puts(exception_string)
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">      env[RACK_ERRORS].flush
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">
</li>
                
                <li onclick="toggle('pre9120', 'post9120')">      if accepts_html?(env)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;common_logger.rb</code>: in <code>call</code>

          
          <div class="context" id="c9140">
              
              <ol start="36" class="pre-context" id="pre9140">
                
                <li onclick="toggle('pre9140', 'post9140')">    # will not be logged, so if exception handling middleware are used,
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">    # they should be loaded after this middleware.  Additionally, because
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">    # the logging happens after the request body has been fully sent, any
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">    # exceptions raised during the sending of the response body will
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">    # cause the request not to be logged.
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">    def call(env)
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">      began_at = Utils.clock_time
</li>
                
              </ol>
              

            <ol start="43" class="context-line">
              <li onclick="toggle('pre9140', 'post9140')">      status, headers, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='44' class="post-context" id="post9140">
                
                <li onclick="toggle('pre9140', 'post9140')">
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">      response[2] = BodyProxy.new(body) { log(env, status, headers, began_at) }
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">      response
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">    end
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">    private
</li>
                
                <li onclick="toggle('pre9140', 'post9140')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;content_length.rb</code>: in <code>call</code>

          
          <div class="context" id="c9160">
              
              <ol start="13" class="pre-context" id="pre9160">
                
                <li onclick="toggle('pre9160', 'post9160')">    include Rack::Utils
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">    def initialize(app)
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">      @app = app
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">    end
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">    def call(env)
</li>
                
              </ol>
              

            <ol start="20" class="context-line">
              <li onclick="toggle('pre9160', 'post9160')">      status, headers, body = response = @app.call(env)<span>...</span></li></ol>

              
              <ol start='21' class="post-context" id="post9160">
                
                <li onclick="toggle('pre9160', 'post9160')">
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">      if !STATUS_WITH_NO_ENTITY_BODY.key?(status.to_i) &amp;&amp;
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">         !headers[CONTENT_LENGTH] &amp;&amp;
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">         !headers[TRANSFER_ENCODING] &amp;&amp;
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">         body.respond_to?(:to_ary)
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">
</li>
                
                <li onclick="toggle('pre9160', 'post9160')">        response[2] = body = body.to_ary
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;configuration.rb</code>: in <code>call</code>

          
          <div class="context" id="c9180">
              
              <ol start="265" class="pre-context" id="pre9180">
                
                <li onclick="toggle('pre9180', 'post9180')">      def initialize(config, app)
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">        @config = config
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">        @app = app
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">      end
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">      def call(env)
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">        env[Const::PUMA_CONFIG] = @config
</li>
                
              </ol>
              

            <ol start="272" class="context-line">
              <li onclick="toggle('pre9180', 'post9180')">        @app.call(env)<span>...</span></li></ol>

              
              <ol start='273' class="post-context" id="post9180">
                
                <li onclick="toggle('pre9180', 'post9180')">      end
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">    end
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">    # Indicate if there is a properly configured app
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">    #
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">    def app_configured?
</li>
                
                <li onclick="toggle('pre9180', 'post9180')">      @options[:app] || File.exist?(rackup)
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;request.rb</code>: in <code>block in handle_request</code>

          
          <div class="context" id="c9200">
              
              <ol start="93" class="pre-context" id="pre9200">
                
                <li onclick="toggle('pre9200', 'post9200')">      # array, we will invoke them when the request is done.
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">      #
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">      env[RACK_AFTER_REPLY] ||= []
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">      begin
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">        if @supported_http_methods == :any || @supported_http_methods.key?(env[REQUEST_METHOD])
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">          status, headers, app_body = @thread_pool.with_force_shutdown do
</li>
                
              </ol>
              

            <ol start="100" class="context-line">
              <li onclick="toggle('pre9200', 'post9200')">            @app.call(env)<span>...</span></li></ol>

              
              <ol start='101' class="post-context" id="post9200">
                
                <li onclick="toggle('pre9200', 'post9200')">          end
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">        else
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">          @log_writer.log &quot;Unsupported HTTP method used: #{env[REQUEST_METHOD]}&quot;
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">          status, headers, app_body = [501, {}, [&quot;#{env[REQUEST_METHOD]} method is not supported&quot;]]
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">        end
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">
</li>
                
                <li onclick="toggle('pre9200', 'post9200')">        # app_body needs to always be closed, hold value in case lowlevel_error
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;thread_pool.rb</code>: in <code>with_force_shutdown</code>

          
          <div class="context" id="c9220">
              
              <ol start="371" class="pre-context" id="pre9220">
                
                <li onclick="toggle('pre9220', 'post9220')">    # provided block if the thread is forced to shutdown during execution.
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">    def with_force_shutdown
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">      t = Thread.current
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">      @shutdown_mutex.synchronize do
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">        raise ForceShutdown if @force_shutdown
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">        t[:with_force_shutdown] = true
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">      end
</li>
                
              </ol>
              

            <ol start="378" class="context-line">
              <li onclick="toggle('pre9220', 'post9220')">      yield<span>...</span></li></ol>

              
              <ol start='379' class="post-context" id="post9220">
                
                <li onclick="toggle('pre9220', 'post9220')">    ensure
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">      t[:with_force_shutdown] = false
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">    end
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">    # Tell all threads in the pool to exit and wait for them to finish.
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">    # Wait +timeout+ seconds then raise +ForceShutdown+ in remaining threads.
</li>
                
                <li onclick="toggle('pre9220', 'post9220')">    # Next, wait an extra +@shutdown_grace_time+ seconds then force-kill remaining
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;request.rb</code>: in <code>handle_request</code>

          
          <div class="context" id="c9240">
              
              <ol start="92" class="pre-context" id="pre9240">
                
                <li onclick="toggle('pre9240', 'post9240')">      # A rack extension. If the app writes #call&#x27;ables to this
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">      # array, we will invoke them when the request is done.
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">      #
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">      env[RACK_AFTER_REPLY] ||= []
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">      begin
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">        if @supported_http_methods == :any || @supported_http_methods.key?(env[REQUEST_METHOD])
</li>
                
              </ol>
              

            <ol start="99" class="context-line">
              <li onclick="toggle('pre9240', 'post9240')">          status, headers, app_body = @thread_pool.with_force_shutdown do<span>...</span></li></ol>

              
              <ol start='100' class="post-context" id="post9240">
                
                <li onclick="toggle('pre9240', 'post9240')">            @app.call(env)
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">          end
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">        else
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">          @log_writer.log &quot;Unsupported HTTP method used: #{env[REQUEST_METHOD]}&quot;
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">          status, headers, app_body = [501, {}, [&quot;#{env[REQUEST_METHOD]} method is not supported&quot;]]
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">        end
</li>
                
                <li onclick="toggle('pre9240', 'post9240')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;server.rb</code>: in <code>process_client</code>

          
          <div class="context" id="c9260">
              
              <ol start="457" class="pre-context" id="pre9260">
                
                <li onclick="toggle('pre9260', 'post9260')">
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">        with_force_shutdown(client) do
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">          client.finish(@first_data_timeout)
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">        end
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">        while true
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">          @requests_count += 1
</li>
                
              </ol>
              

            <ol start="464" class="context-line">
              <li onclick="toggle('pre9260', 'post9260')">          case handle_request(client, requests + 1)<span>...</span></li></ol>

              
              <ol start='465' class="post-context" id="post9260">
                
                <li onclick="toggle('pre9260', 'post9260')">          when false
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">            break
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">          when :async
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">            close_socket = false
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">            break
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">          when true
</li>
                
                <li onclick="toggle('pre9260', 'post9260')">            ThreadPool.clean_thread_locals if clean_thread_locals
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;server.rb</code>: in <code>block in run</code>

          
          <div class="context" id="c9280">
              
              <ol start="238" class="pre-context" id="pre9280">
                
                <li onclick="toggle('pre9280', 'post9280')">    def run(background=true, thread_name: &#x27;srv&#x27;)
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">      BasicSocket.do_not_reverse_lookup = true
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">      @events.fire :state, :booting
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">      @status = :run
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">
</li>
                
              </ol>
              

            <ol start="245" class="context-line">
              <li onclick="toggle('pre9280', 'post9280')">      @thread_pool = ThreadPool.new(thread_name, @options) { |client| process_client client }<span>...</span></li></ol>

              
              <ol start='246' class="post-context" id="post9280">
                
                <li onclick="toggle('pre9280', 'post9280')">
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">      if @queue_requests
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">        @reactor = Reactor.new(@io_selector_backend) { |c| reactor_wakeup c }
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">        @reactor.run
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">      end
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">
</li>
                
                <li onclick="toggle('pre9280', 'post9280')">
</li>
                
              </ol>
              
          </div>
          
      </li>

      <li class="frame">
        <code>&#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;puma-6.4.2&#x2F;lib&#x2F;puma&#x2F;thread_pool.rb</code>: in <code>block in spawn_thread</code>

          
          <div class="context" id="c9300">
              
              <ol start="148" class="pre-context" id="pre9300">
                
                <li onclick="toggle('pre9300', 'post9300')">          end
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">          if @clean_thread_locals
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">            ThreadPool.clean_thread_locals
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">          end
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">          begin
</li>
                
              </ol>
              

            <ol start="155" class="context-line">
              <li onclick="toggle('pre9300', 'post9300')">            @out_of_band_pending = true if block.call(work)<span>...</span></li></ol>

              
              <ol start='156' class="post-context" id="post9300">
                
                <li onclick="toggle('pre9300', 'post9300')">          rescue Exception =&gt; e
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">            STDERR.puts &quot;Error reached top of thread-pool: #{e.message} (#{e.class})&quot;
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">          end
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">        end
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">      end
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">
</li>
                
                <li onclick="toggle('pre9300', 'post9300')">      @workers &lt;&lt; th
</li>
                
              </ol>
              
          </div>
          
      </li>

  </ul>
</div>

<div id="requestinfo">
  <h2>Request information</h2>

  <h3 id="get-info">GET</h3>
  
    <p>No GET data.</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data.</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data.</p>
  

  <h3 id="env-info">Rack ENV</h3>
    <table class="req">
      <thead>
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
          
          <tr>
            <td>GATEWAY_INTERFACE</td>
            <td class="code"><div>&quot;CGI&#x2F;1.2&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_ACCEPT</td>
            <td class="code"><div>&quot;*&#x2F;*&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_AUTHORIZATION</td>
            <td class="code"><div>&quot;Basic dXNlcm5hbWUxOnBhc3N3b3JkMQ==&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_HOST</td>
            <td class="code"><div>&quot;localhost:9292&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_USER_AGENT</td>
            <td class="code"><div>&quot;curl&#x2F;8.4.0&quot;</div></td>
          </tr>
          
          <tr>
            <td>HTTP_VERSION</td>
            <td class="code"><div>&quot;HTTP&#x2F;1.1&quot;</div></td>
          </tr>
          
          <tr>
            <td>ORIGINAL_FULLPATH</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>ORIGINAL_SCRIPT_NAME</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>PATH_INFO</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>QUERY_STRING</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>REMOTE_ADDR</td>
            <td class="code"><div>&quot;::1&quot;</div></td>
          </tr>
          
          <tr>
            <td>REQUEST_METHOD</td>
            <td class="code"><div>&quot;GET&quot;</div></td>
          </tr>
          
          <tr>
            <td>REQUEST_PATH</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>REQUEST_URI</td>
            <td class="code"><div>&quot;&#x2F;&quot;</div></td>
          </tr>
          
          <tr>
            <td>ROUTES_5460_SCRIPT_NAME</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>SCRIPT_NAME</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_NAME</td>
            <td class="code"><div>&quot;localhost&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_PORT</td>
            <td class="code"><div>&quot;9292&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_PROTOCOL</td>
            <td class="code"><div>&quot;HTTP&#x2F;1.1&quot;</div></td>
          </tr>
          
          <tr>
            <td>SERVER_SOFTWARE</td>
            <td class="code"><div>&quot;puma 6.4.2 The Eagle of Durango&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.authenticated_encrypted_cookie_salt</td>
            <td class="code"><div>&quot;authenticated encrypted cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.authorized_host</td>
            <td class="code"><div>&quot;localhost&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.backtrace_cleaner</td>
            <td class="code"><div>#&lt;Rails::BacktraceCleaner:0x0000000124d90538 @silencers=[#&lt;Proc:0x0000000124d90100 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;activesupport-7.1.3&#x2F;lib&#x2F;active_support&#x2F;backtrace_cleaner.rb:120&gt;, #&lt;Proc:0x0000000124d90060 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;activesupport-7.1.3&#x2F;lib&#x2F;active_support&#x2F;backtrace_cleaner.rb:124&gt;, #&lt;Proc:0x000000028873fde0 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;backtrace_cleaner.rb:24&gt;], @filters=[#&lt;Proc:0x0000000124d901c8 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;activesupport-7.1.3&#x2F;lib&#x2F;active_support&#x2F;backtrace_cleaner.rb:116&gt;, #&lt;Proc:0x000000028873fe30 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;backtrace_cleaner.rb:14&gt;, #&lt;Proc:0x000000028873fe08 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;backtrace_cleaner.rb:17&gt;], @root=&quot;&#x2F;Users&#x2F;daviddoolin&#x2F;src&#x2F;nplus1&#x2F;&quot;&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy_nonce_directives</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy_nonce_generator</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.content_security_policy_report_only</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_digest</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_rotations</td>
            <td class="code"><div>#&lt;ActiveSupport::Messages::RotationConfiguration:0x0000000123a50928 @signed=[], @encrypted=[]&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_same_site_protection</td>
            <td class="code"><div>#&lt;Proc:0x000000028873f020 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;railties-7.1.3&#x2F;lib&#x2F;rails&#x2F;application.rb:705&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.cookies_serializer</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.debug_exception_log_level</td>
            <td class="code"><div>4</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.encrypted_cookie_cipher</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.encrypted_cookie_salt</td>
            <td class="code"><div>&quot;encrypted cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.encrypted_signed_cookie_salt</td>
            <td class="code"><div>&quot;signed encrypted cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.http_auth_salt</td>
            <td class="code"><div>&quot;http authentication&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.key_generator</td>
            <td class="code"><div>#&lt;ActiveSupport::CachingKeyGenerator:0x000000028873fac0 @key_generator=#&lt;ActiveSupport::KeyGenerator:0x00000000002f58&gt;, @cache_keys=#&lt;Concurrent::Map:0x000000028873fa48 entries=0 default_proc=nil&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.log_rescued_responses</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.logger</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.parameter_filter</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.permissions_policy</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.redirect_filter</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.remote_ip</td>
            <td class="code"><div>#&lt;ActionDispatch::RemoteIp::GetIp:0x000000029819f880 @req=#&lt;ActionDispatch::Request GET &quot;http:&#x2F;&#x2F;localhost:9292&#x2F;&quot; for ::1&gt;, @check_ip=true, @proxies=[#&lt;IPAddr: IPv4:127.0.0.0&#x2F;255.0.0.0&gt;, #&lt;IPAddr: IPv6:0000:0000:0000:0000:0000:0000:0000:0001&#x2F;ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff&gt;, #&lt;IPAddr: IPv6:fc00:0000:0000:0000:0000:0000:0000:0000&#x2F;fe00:0000:0000:0000:0000:0000:0000:0000&gt;, #&lt;IPAddr: IPv4:10.0.0.0&#x2F;255.0.0.0&gt;, #&lt;IPAddr: IPv4:172.16.0.0&#x2F;255.240.0.0&gt;, #&lt;IPAddr: IPv4:192.168.0.0&#x2F;255.255.0.0&gt;]&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.request_id</td>
            <td class="code"><div>&quot;50be0aa2-1be6-4b3e-aee9-8dbe79f59a9d&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.routes</td>
            <td class="code"><div>#&lt;ActionDispatch::Routing::RouteSet:0x0000000113e80828&gt;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.secret_key_base</td>
            <td class="code"><div>&quot;i_am_a_secret&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.show_detailed_exceptions</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.show_exceptions</td>
            <td class="code"><div>:all</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.signed_cookie_digest</td>
            <td class="code"><div>nil</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.signed_cookie_salt</td>
            <td class="code"><div>&quot;signed cookie&quot;</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.use_authenticated_cookie_encryption</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>action_dispatch.use_cookies_with_metadata</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>puma.config</td>
            <td class="code"><div>#&lt;Puma::Configuration:0x00000001239d8810 @options=#&lt;Puma::UserFileDefaultOptions:0x0000000124d9fb00 @user_options={:environment=&gt;&quot;development&quot;, :pid=&gt;nil, :Port=&gt;9292, :Host=&gt;&quot;localhost&quot;, :AccessLog=&gt;[], :config=&gt;&quot;&#x2F;Users&#x2F;daviddoolin&#x2F;src&#x2F;nplus1&#x2F;rails_ringle_file.ru&quot;, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;localhost:9292&quot;], :app=&gt;#&lt;Rack::ContentLength:0x00000001248fec40 @app=#&lt;Rack::CommonLogger:0x00000001248fed30 @app=#&lt;Rack::ShowExceptions:0x00000001247d4b30 @app=#&lt;Rack::Lint:0x00000001247d4c70 @app=#&lt;Rack::TempfileReaper:0x00000001247d4d10 @app=App&gt;&gt;&gt;, @logger=#&lt;IO:&lt;STDERR&gt;&gt;&gt;&gt;, :log_writer=&gt;#&lt;Puma::LogWriter:0x00000001239d8630 @formatter=#&lt;Puma::LogWriter::DefaultFormatter:0x0000000124d9e9f8&gt;, @custom_logger=nil, @stdout=#&lt;IO:&lt;STDOUT&gt;&gt;, @stderr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false, @error_logger=#&lt;Puma::ErrorLogger:0x0000000124d9e9d0 @ioerr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false&gt;&gt;}, @file_options={}, @default_options={:auto_trim_time=&gt;30, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;0.0.0.0:9292&quot;], :clean_thread_locals=&gt;false, :debug=&gt;false, :early_hints=&gt;nil, :environment=&gt;&quot;development&quot;, :first_data_timeout=&gt;30, :idle_timeout=&gt;nil, :io_selector_backend=&gt;:auto, :log_requests=&gt;false, :logger=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :max_fast_inline=&gt;10, :max_threads=&gt;5, :min_threads=&gt;0, :mode=&gt;:http, :mutate_stdout_and_stderr_to_sync_on_write=&gt;true, :out_of_band=&gt;[], :persistent_timeout=&gt;20, :queue_requests=&gt;true, :rackup=&gt;&quot;config.ru&quot;, :raise_exception_on_sigterm=&gt;true, :reaping_time=&gt;1, :remote_address=&gt;:socket, :silence_single_worker_warning=&gt;false, :silence_fork_callback_warning=&gt;false, :tag=&gt;&quot;nplus1&quot;, :tcp_host=&gt;&quot;0.0.0.0&quot;, :tcp_port=&gt;9292, :wait_for_less_busy_worker=&gt;0.005, :worker_boot_timeout=&gt;60, :worker_check_interval=&gt;5, :worker_culling_strategy=&gt;:youngest, :worker_shutdown_timeout=&gt;30, :worker_timeout=&gt;60, :workers=&gt;0, :http_content_length_limit=&gt;nil, :Verbose=&gt;false, :Silent=&gt;false, :events=&gt;#&lt;Puma::Events:0x0000000124d9ffb0 @hooks={:state=&gt;[], :on_booted=&gt;[]}&gt;, :preload_app=&gt;false}&gt;, @plugins=#&lt;Puma::PluginLoader:0x0000000124d9fa10 @instances=[]&gt;, @user_dsl=#&lt;Puma::DSL:0x0000000124d9f8d0 @config=#&lt;Puma::Configuration:0x00000001239d8810 ...&gt;, @options={:environment=&gt;&quot;development&quot;, :pid=&gt;nil, :Port=&gt;9292, :Host=&gt;&quot;localhost&quot;, :AccessLog=&gt;[], :config=&gt;&quot;&#x2F;Users&#x2F;daviddoolin&#x2F;src&#x2F;nplus1&#x2F;rails_ringle_file.ru&quot;, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;localhost:9292&quot;], :app=&gt;#&lt;Rack::ContentLength:0x00000001248fec40 @app=#&lt;Rack::CommonLogger:0x00000001248fed30 @app=#&lt;Rack::ShowExceptions:0x00000001247d4b30 @app=#&lt;Rack::Lint:0x00000001247d4c70 @app=#&lt;Rack::TempfileReaper:0x00000001247d4d10 @app=App&gt;&gt;&gt;, @logger=#&lt;IO:&lt;STDERR&gt;&gt;&gt;&gt;, :log_writer=&gt;#&lt;Puma::LogWriter:0x00000001239d8630 @formatter=#&lt;Puma::LogWriter::DefaultFormatter:0x0000000124d9e9f8&gt;, @custom_logger=nil, @stdout=#&lt;IO:&lt;STDOUT&gt;&gt;, @stderr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false, @error_logger=#&lt;Puma::ErrorLogger:0x0000000124d9e9d0 @ioerr=#&lt;IO:&lt;STDERR&gt;&gt;, @debug=false&gt;&gt;}, @plugins=[]&gt;, @file_dsl=#&lt;Puma::DSL:0x0000000124d9f808 @config=#&lt;Puma::Configuration:0x00000001239d8810 ...&gt;, @options={}, @plugins=[]&gt;, @default_dsl=#&lt;Puma::DSL:0x0000000124d9f718 @config=#&lt;Puma::Configuration:0x00000001239d8810 ...&gt;, @options={:auto_trim_time=&gt;30, :binds=&gt;[&quot;tcp:&#x2F;&#x2F;0.0.0.0:9292&quot;], :clean_thread_locals=&gt;false, :debug=&gt;false, :early_hints=&gt;nil, :environment=&gt;&quot;development&quot;, :first_data_timeout=&gt;30, :idle_timeout=&gt;nil, :io_selector_backend=&gt;:auto, :log_requests=&gt;false, :logger=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :max_fast_inline=&gt;10, :max_threads=&gt;5, :min_threads=&gt;0, :mode=&gt;:http, :mutate_stdout_and_stderr_to_sync_on_write=&gt;true, :out_of_band=&gt;[], :persistent_timeout=&gt;20, :queue_requests=&gt;true, :rackup=&gt;&quot;config.ru&quot;, :raise_exception_on_sigterm=&gt;true, :reaping_time=&gt;1, :remote_address=&gt;:socket, :silence_single_worker_warning=&gt;false, :silence_fork_callback_warning=&gt;false, :tag=&gt;&quot;nplus1&quot;, :tcp_host=&gt;&quot;0.0.0.0&quot;, :tcp_port=&gt;9292, :wait_for_less_busy_worker=&gt;0.005, :worker_boot_timeout=&gt;60, :worker_check_interval=&gt;5, :worker_culling_strategy=&gt;:youngest, :worker_shutdown_timeout=&gt;30, :worker_timeout=&gt;60, :workers=&gt;0, :http_content_length_limit=&gt;nil, :Verbose=&gt;false, :Silent=&gt;false, :events=&gt;#&lt;Puma::Events:0x0000000124d9ffb0 @hooks={:state=&gt;[], :on_booted=&gt;[]}&gt;, :preload_app=&gt;false}, @plugins=[]&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>puma.request_body_wait</td>
            <td class="code"><div>0.0009999275207519531</div></td>
          </tr>
          
          <tr>
            <td>puma.socket</td>
            <td class="code"><div>#&lt;TCPSocket:fd 18, AF_INET6, ::1, 9292&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.after_reply</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>rack.errors</td>
            <td class="code"><div>#&lt;Rack::Lint::Wrapper::ErrorWrapper:0x000000016dfc01c0 @error=#&lt;IO:&lt;STDERR&gt;&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.hijack</td>
            <td class="code"><div>#&lt;Proc:0x000000016dfc0648 &#x2F;Users&#x2F;daviddoolin&#x2F;.rvm&#x2F;gems&#x2F;ruby-3.3.0@nplus1&#x2F;gems&#x2F;rack-3.0.9&#x2F;lib&#x2F;rack&#x2F;lint.rb:556&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.hijack?</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>rack.input</td>
            <td class="code"><div>#&lt;Rack::Lint::Wrapper::InputWrapper:0x000000016dfc0350 @input=#&lt;Puma::NullIO:0x0000000124b5be48&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.multiprocess</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>rack.multithread</td>
            <td class="code"><div>true</div></td>
          </tr>
          
          <tr>
            <td>rack.request.cookie_hash</td>
            <td class="code"><div>{}</div></td>
          </tr>
          
          <tr>
            <td>rack.request.form_hash</td>
            <td class="code"><div>{}</div></td>
          </tr>
          
          <tr>
            <td>rack.request.form_input</td>
            <td class="code"><div>#&lt;Rack::Lint::Wrapper::InputWrapper:0x000000016dfc0350 @input=#&lt;Puma::NullIO:0x0000000124b5be48&gt;&gt;</div></td>
          </tr>
          
          <tr>
            <td>rack.request.query_hash</td>
            <td class="code"><div>{}</div></td>
          </tr>
          
          <tr>
            <td>rack.request.query_string</td>
            <td class="code"><div>&quot;&quot;</div></td>
          </tr>
          
          <tr>
            <td>rack.run_once</td>
            <td class="code"><div>false</div></td>
          </tr>
          
          <tr>
            <td>rack.tempfiles</td>
            <td class="code"><div>[]</div></td>
          </tr>
          
          <tr>
            <td>rack.url_scheme</td>
            <td class="code"><div>&quot;http&quot;</div></td>
          </tr>
          
          <tr>
            <td>rack.version</td>
            <td class="code"><div>[1, 6]</div></td>
          </tr>
          
      </tbody>
    </table>

</div>

<div id="explanation">
  <p>
    You're seeing this error because you use <code>Rack::ShowExceptions</code>.
  </p>
</div>

</body>
</html>
